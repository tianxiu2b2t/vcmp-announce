name: Setup Environment
description: Setup build environment (Cargo)

inputs:
  architecture:
    description: CPU architecture (x86 or x64)
    required: false
    default: "x64"

runs:
  using: "composite"
  steps:
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: Install x86 target and dependencies (including SSL)
      if: inputs.architecture == 'x86'
      run: |
        if [[ $RUNNER_OS == "Windows" ]]; then
          rustup target add i686-pc-windows-msvc
        elif [[ $RUNNER_OS == "Linux" ]]; then
          rustup target add i686-unknown-linux-gnu
          
          # Enable 32-bit architecture support
          sudo dpkg --add-architecture i386
          sudo apt-get update -y
          
          # Install cross-compilation tools and 32-bit libraries
          sudo apt-get install -y \
            libc6:i386 \
            libstdc++6:i386 \
            libssl-dev:i386 \
            zlib1g-dev:i386 \
            pkg-config \
            pkg-config:i386 \
            gcc-multilib \
            libc6-dev-i386 \
            i686-linux-gnu-gcc

          # Configure pkg-config for cross-compilation
          echo "PKG_CONFIG=i686-linux-gnu-pkg-config" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/i686-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig" >> $GITHUB_ENV
          
          # Explicitly set OpenSSL paths for cross-compilation
          echo "OPENSSL_DIR=/usr/lib/i386-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/i386-linux-gnu/openssl" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/i386-linux-gnu" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Install x64 dependencies
      if: inputs.architecture == 'x64'
      run: |
        if [[ $RUNNER_OS == "Linux" ]]; then
          sudo apt-get update -y
          sudo apt-get install -y libssl-dev zlib1g-dev pkg-config
        fi
      shell: bash
    